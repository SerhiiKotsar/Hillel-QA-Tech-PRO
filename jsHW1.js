'number' + 3 + 3

/*
Результат: number33
Описание: В данном случае происходит конкатенация строк. JavaScript выполнит операции слева направо.
*/

null + 3

/*
Результат: 3
Описание: В данном случае null будет преобразован в число, и результат будет 3. Таким образом, результат выражения null + 3 будет равен 3.
*/

5 && "qwerty"

/*
Результат: qwerty
Описание: В данном случае, оба операнда истинны (число 5 интерпретируется как true, и непустая строка "qwerty" также является true). Поэтому результат выражения 5 && "qwerty" будет последним операндом, то есть строкой "qwerty".
*/

+ '40' + +'2' + "hillel"

/*
Результат: 42hillel
Описание:
1. + '40': Унарный плюс перед строкой пытается преобразовать строку в число. В данном случае, это приведет к числу 40.
2. +'2': Аналогично, унарный плюс перед строкой преобразует ее в число. Это будет число 2.
3. 40 + 2: Сложение чисел 40 и 2 дает 42.
4. 42 + "hillel": Здесь происходит конкатенация числа 42 со строкой "hillel". Результатом будет строка "42hillel".
*/

'10' - 5 === 6

/*
Результат: false
Описание:
1. '10' - 5: Здесь Js попытается преобразовать строку '10' в число и выполнить вычитание. Результат этого выражения будет числом 5.
2. Теперь у нас имеется сравнение 5 === 6. Это сравнение вернет false, так как числа 5 и 6 не равны.
*/

true + false

/*
Результат: 1
Описание: В Js, если вы используете оператор + с булевыми значениями (true и false), они будут автоматически преобразованы в числа (1 и 0 соответственно), и затем произойдет сложение.
*/

'4px' - 3

/*
Результат: NaN
Описание:  В выражении '4px' - 3 Js не сможет корректно преобразовать строку в число, так как '4px' не является чистым числом. Поэтому результат будет NaN (Not a Number), что указывает на ошибку при математической операции.
*/

'4' - 3

/*
Результат: 1
Описание: В выражении '4' - 3 строка '4' будет автоматически преобразована в число, и затем выполняется вычитание. Результатом будет число 1
*/

'6' + 3 ** 0

/*
Результат: 61
Описание: В выражении '6' + 3 ** 0 сначала будет вычислено значение 3 ** 0, что равно 1. Затем произойдет конкатенация строки '6' с числом 1, поскольку оператор + в данном контексте будет воспринят как конкатенация, а не сложение чисел
*/

12 / '6'

/*
Результат: 2
Описание: В этом выражении, оператор деления / приведет строку '6' к числу (если это возможно) и затем выполнит деление.
*/

'10' + (5 === 6)

/*
Результат: 10false
Описание: В данном выражении, сначала выполняется сравнение 5 === 6, которое возвращает логическое значение false. Затем это логическое значение false преобразуется в строку при выполнении конкатенации с строкой '10'
*/

null == ''

/*
Результат: false
Описание: В выражении null == '', операнды не могут быть преобразованы друг в друга, и поэтому нестрогое сравнение возвращает false. null и пустая строка ('') принадлежат к разным типам данных, и нестрогое сравнение == в данном случае не выполняет автоматическое преобразование типов.
*/

3 ** (9 / 3)

/*
Результат: 27
Описание: В данном выражении сначала производится операция в скобках 9 / 3, что равно 3. Затем выполняется возведение в степень 3 ** 3, что равно 27
*/

!!'false' == !!'true'

/*
Результат: true
Описание: 
1. 'false' и 'true' - это строки, и они не пусты, что в логическом контексте означает true.
2. !! - это двойное отрицание, которое используется для преобразования значения в его логическое представление. Если значение истинно, то !! превращает его в true; если ложно, то в false.
Таким образом, !!'false' становится true, и !!'true' также становится true.
3. Теперь у нас есть выражение true == true, и результатом будет true
*/

0 || '0' && 1

/*
Результат: 1
Описание: 
1. Сначала выполняется оператор && (логическое И) внутри '0' && 1:
    - '0' преобразуется в true, так как это непустая строка.
    - 1 также является истинным значением.
2. Теперь у нас есть выражение 0 || true. Оператор || (логическое ИЛИ) возвращает первый истинный операнд. В данном случае, 0 - ложное значение, и true - истинное. Таким образом, результатом выражения становится true.
3. Мы получаем 1 в выводе console.log(0 || '0' && 1), это может быть связано с тем, что console.log выводит результат на консоль. Если значение true выводится на консоль, оно может отобразиться как 1, поскольку true в контексте вывода может быть представлено числом 1.
*/

(+null == false) < 1

/*
Результат: true
Описание: 
1. +null преобразуется в 0.
2. false преобразуется в 0 в контексте сравнения.
3. Теперь у нас есть сравнение 0 == 0, которое возвращает true.
4. Затем сравнивается true < 1, что также возвращает true.
*/

false && true || true

/*
Результат: true
Описание: 
1. Сначала выполняется оператор && (логическое И). Если первый операнд (слева от &&) является ложным, возвращается он; в противном случае, возвращается второй операнд.
2. Затем выполняется оператор || (логическое ИЛИ). Если первый операнд (результат &&) является истинным, возвращается он; в противном случае, возвращается второй операнд.
Таким образом, в данном случае:
    false && true дает false.
    false || true дает true.
*/

false && (false || true)

/*
Результат: false
Описание: 
1. false || true дает true, так как оператор || возвращает первый истинный операнд.
2. Теперь у нас есть выражение false && true. Оператор && вернет первый ложный операнд, иначе второй операнд. В данном случае, false является ложным значением, поэтому результат выражения false && (false || true) будет false.
*/

(+null == false) < 1 ** 5

/*
Результат: true
Описание: 
1. +null преобразуется в 0.
2. false преобразуется в 0 в контексте сравнения.
3. Теперь у нас есть сравнение 0 == 0, которое возвращает true.
4. 1 ** 5 равно 1.
5. Теперь у нас есть сравнение true < 1, что также возвращает true, потому что логическое true преобразуется в 1 при сравнении.
*/
